 
service: auth-clear-functions

plugins:
  - serverless-iam-roles-per-function
  - serverless-export-env
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  timeout: 30
  environment:
    STAGE: ${self:provider.stage}
    # Database connection info
    DB_ENDPOINT: ${cf:auth-demo-a-${self:provider.stage}.AuroraClusterEndpoint}
    DB_HOST: ${cf:auth-demo-a-${self:provider.stage}.AuroraClusterEndpoint}
    DB_PORT: ${cf:auth-demo-a-${self:provider.stage}.AuroraClusterPort}
    DB_NAME: authcleardb
    DB_SECRET_ARN: ${cf:auth-demo-a-${self:provider.stage}.AuroraSecretArn}
    # These will be populated at runtime using the secret ARN
    DB_USERNAME: ${env:DB_USERNAME, 'postgres'}
    DB_PASSWORD: ${env:DB_PASSWORD, 'postgres'}
  
  # VPC configuration from main stack
  vpc:
    securityGroupIds:
      - ${cf:auth-demo-a-${self:provider.stage}.LambdaSecurityGroupId}
    subnetIds:
      - ${cf:auth-demo-a-${self:provider.stage}.PrivateSubnetA}
      - ${cf:auth-demo-a-${self:provider.stage}.PrivateSubnetB}
  
  # IAM permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: 
            - ${cf:auth-demo-a-${self:provider.stage}.AuroraSecretArn}
            - "arn:aws:ssm:${self:provider.region}:*:parameter/*"
        # VPC permissions
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
          Resource: "*"

build:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    target: node20
    format: cjs
    # Exclude AWS SDK which is included in Lambda runtime
    external:
      - '@aws-sdk/*'

functions:
  # Token authorizer for API endpoints
  authorizerFunction:
    handler: src/functions/authorizer/index.handler
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource: "arn:aws:ssm:${self:provider.region}:*:parameter/auth-demo-a/${self:provider.stage}/*"
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: ${cf:auth-demo-a-${self:provider.stage}.AuroraSecretArn}

  createMerchant:
    handler: src/functions/merchants/create.handler
    events:
      - http:
          path: /merchants
          method: post
          cors:
            origin: ${self:custom.corsOrigins}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
            methods:
              - POST
              - OPTIONS
          # No authorizer - public endpoint
  
  listMerchants:
    handler: src/functions/merchants/list.handler
    events:
      - http:
          path: /merchants
          method: get
          cors:
            origin: ${self:custom.corsOrigins}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
            methods:
              - GET
              - OPTIONS
          authorizer:
            name: authorizerFunction
            type: token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0

custom:
  corsOrigins: "https://d1eu8fm0ysafq4.cloudfront.net,http://localhost:3000,http://localhost:8080"
  exportEnv:
    overwrite: true
    filename: ../.env

package:
  individually: true 