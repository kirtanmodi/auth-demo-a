import "reflect-metadata";
import { DataSource } from "typeorm";
import { config } from "dotenv";
import path from "path";
import { fileURLToPath } from "url";

// Load environment variables
config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get credentials from environment
// During local development, these will be in the .env file generated by serverless-export-env
// In AWS Lambda, these are populated from Secrets Manager at runtime
const getDbConfig = () => {
  return {
    host: process.env.DB_HOST || "localhost",
    port: parseInt(process.env.DB_PORT || "5432"),
    username: process.env.DB_USERNAME || "postgres",
    password: process.env.DB_PASSWORD || "postgres",
    database: process.env.DB_NAME || "authcleardb",
  };
};

const dbConfig = getDbConfig();

export const AppDataSource = new DataSource({
  type: "postgres",
  host: dbConfig.host,
  port: dbConfig.port,
  username: dbConfig.username,
  password: dbConfig.password,
  database: dbConfig.database,
  synchronize: false, // Disable synchronize for migrations
  logging: process.env.NODE_ENV === "development",
  entities: [path.join(__dirname, "../entity/**/*.{ts,js}")],
  migrations: [path.join(__dirname, "../migration/**/*.{ts,js}")],
  migrationsTableName: "migrations",
  migrationsRun: false,
  migrationsTransactionMode: "each",
  extra: {
    // Force IPv4 to avoid IPv6 connection issues
    host: "127.0.0.1",
    // Connection timeout settings
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 5,
  },
});
