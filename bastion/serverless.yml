org: kirtanmodi
service: auth-demo-c-bastion

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1

# No functions in bastion stack

resources:
  Resources:
    # Bastion Host Security Group
    BastionSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for bastion host
        VpcId: ${cf:auth-demo-c-${self:provider.stage}.VpcId}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 103.84.105.5/32  # Replace with your IP address
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-bastion-sg

    # Bastion Host
    BastionHost:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: t3.micro
        SubnetId: ${cf:auth-demo-c-${self:provider.stage}.PublicSubnet}
        ImageId: ami-072e42fd77921edac  # Amazon Linux 2023 AMI (us-east-1)
        SecurityGroupIds:
          - !Ref BastionSecurityGroup
        KeyName: aurora-bastion-key  # Create this in AWS Console first
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-bastion
    
    # Update Aurora security group to allow access from bastion
    AuroraIngressRule:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Allow PostgreSQL access from bastion host
        GroupId: ${cf:auth-demo-c-${self:provider.stage}.AuroraSecurityGroupId}
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !Ref BastionSecurityGroup
            
  Outputs:
    BastionSecurityGroupId:
      Value: !Ref BastionSecurityGroup
      Export:
        Name: ${self:service}-${self:provider.stage}-bastion-sg-id
        
    BastionPublicIP:
      Value: !GetAtt BastionHost.PublicIp
      Export:
        Name: ${self:service}-${self:provider.stage}-bastion-ip 